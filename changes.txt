Unreleased
==========

Changed
-------

* Added an application variable compartment.  The app variable compartment is
  accessed via the "a@" prefix and allows the template to set variables which
  will be returned to the application via the RenderResult.

* The for tag has been refactored into a for tag used for counter-based loops
  and a foreach tag used for iterator-based loops.

* The include and code tags now only return a dictionary for the return variable
  instead of wrapping the dictionary into an attribute wrapper.  This way there
  is no ambiguity if an accessed attribute exists which would prevent __getattr__
  being called to retrieve the value.

    {% include "..." ; return result %}
    {{ result["update"] }}

* Expand now allows expanding into any specific compartment:

    {% expand expr ; into global %}

  Supported values are "local", "global", "private", and "return". If no value
  is specified, it defaults to local.

* Return variables are now accessible just like any other variable compartment.
  They must be prefixed with "r@" to be accessed, and can be set, retrieved,
  and cleared.

* Overhauled how variables are accessed.  Originally, global variables were
  just local variables set in the upper-most scope.  Since access to a variable
  would walk up the scope, any variable set in the upper-most scope without a
  variable of the same name set anywhere lower would be visible.

  This change divides variables into three compartments.

  Local variables are set in a template's render state, and each time another
  template is included, the local variables are copied into the included
  templates' variables. The included template has access to those variables and
  can change them in its own context, but upon return the local variables in the
  including template are restored.  Technically what happens is when a template
  is include, a copy of the local variables is saved into a stack, and when that
  template is finished, the local variables are restored.  A template can set
  local variables knowing that nested templates will see those variable unless
  they are unset and that the value of the local variable in the current
  template is not affected by changes in nested templates.

  Private variables are private to each included template. Whenever a template
  is included, the current private variables are saved, and a new empty private
  variable dictionary is created. Upon return the saved variables are restored.
  A template can set private variable knowing that nested templates will not see
  the those variables and the value of a private variable in the current
  template is not affected by changes in a nested template.

  Global variables are availabe to all templates.  A template can set a global
  variable and any other template, nested or parent, can see the changes of that
  global variable.

  Variables must be accessed in the compartment they reside in.  Naming pattens
  will cause a default to be applied.  Any variable that starts and ends with
  an underscore "_" defaults to being global. Any variable that starts with but
  does not end with an underscore default to being private. The underscore by
  itself also defaults to being private. All other variables default to local.

  Explicit control can be specified via a prefix to a variable name in the form
  of <type>@<name>.  Type can be "l" for local, "g" for global, and "p" for
  private.

* Parser changes will require some template changes. In particular expression
  sections may now require a semicolon separator to define more information
  such as on include between the path expression, with and return segments
  or on code segments

* Currently dot notation only performs attribute lookup and bracket notation
  performs item lookup.  Eventually a change may be added to allow

  . notation (item, then attr)
  [ ] notation (always item)
  @ notation (always attr)

  data = user.name (first try user["name"] then user.name
  data = user["name"]  - always user["name"]
  data = user@name - always user.name

* Code formatting, layout, and documentatoin changes

* Action tags are now handled in a more modular way

Added
-----

* Added action tag to clear all variables from a given compartment

    {% clear return %}

  Value values are "local", "global", "private" and "return". If no value is
  specified, it defaults to local.

* Added pylintrc configuration file in the project directory containing common
  disabled messages so they don't  need to be added to the top of every other
  file needing them.

* New parser supports more natural operators such as +, -, ==, /, <, >

* Parser allows tail continuations

    users[0].name.toupper()[0] - Access user[0], attribute/item name, call
    toupper on name, the access the first item/character of the result

* Hook tag allows calling registered hooks.

    Hooks can be registered that take env, template, line, renderer, scope,
    and params.  Tags {% hook ... ; with ... %} and {% rhook ... ; with ... %}
    can then be used to call the hooks.  The call just returns if the hook
    doesn't exist. Hooks may be used to generate output directly with renderer,
    include other templates via env, template.render_nested, set variables in
    the scope, etc.

* Userdata can be passed to a template during render.

    Userdata passed can then be passed on to hooks and in the future special
    functions. These hooks and functions can then access the userdata.

* Support for special functions

    Special functions take a list of env, template, line, scope, params and
    instead of having the parameters automatically evaluated, they are the
    expression nodes.  This allows special functions like defined and default
    to exist which can evaluate a node when needed, check for errors, etc.

* Support for dictionarys in the template.

    Dictionary syntax borrows from list syntax: [key:value, key:value, ...]
    An empty dictionary can be created as [:]

* Support for iteration or increment loops.

    An iteration loop has the same syntax:

        {% for var in items %} or {% for var,pos in items %}

    An increment loop takes three segments, init, test, and incr.  The
    init and incr are multi-assign expressions segments while test is
    an expression:

        {% for i = 0, j = 0 ; i < 10 ; i = i + 1 %}

    In all othere ways they are the same, ending with {% endfor %}.  The
    {% else %} tag behaves the same, being rendered only if the loop didn't
    have any iterations.

* Support for an abort function.

    A call to Template.render can now pass an abort function which gets called
    at the start of each node list's render.  If the abort function returns
    True, then an AbortError will be raised.
