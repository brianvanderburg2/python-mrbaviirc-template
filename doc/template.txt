Template Syntax
===============

A template consistes of one or more blocks.  There are currently four types
of blocks:

    TEXTBLOCK - This is a direct text block
    COMMENTBLOCK - This block is just for comments
    ACTIONBLOCK - This block can affect the template
    EMITTERBLOCK - This block emittes output from an expression.

Parsing is performed by searching for the first "{" character that starts a
tag in the template..  Everything before that becomes a TEXTBLOCK.  Then
parsing handles the tag as the correct type, and continues until the end of the
input.

Within a text block certain characters can be escaped:

    "\\" produces a literal "\"
    "\{" produces a literal "{"
    "\}" produces a literal "}"


General Syntax Definition
=========================

TEMPLATE: BLOCK*

BLOCK: (TEXTBLOCK | COMMENTBLOCK | ACTIONSEGMENT | EMITTERBLOCK)

WSNONE = ""
WSTRIMTONL = "-"
WSTRIMTONL_PRESERVENL = "^"
WSADDNL = "+"
WSADDSP = "*"

WSCONTROL = (WSNONE | WSTRIMTONL | WSTRIMTONL_PRESERVENL | WSADDNL | WSADDSP )

TEXTBLOCK: All text up to a starting tag "{"

COMMENTBLOCK: "{#" + WSCONTROL + COMMENT + WSCONTROL + "#}"
COMMENT: All text up to the terminating tag of the comment block

ACTIONBLOCK: "{%" + WSCONTROL + ACTION + WSCONTROL + "%}"
EMITTERBLOCK: "{{" + WSCONTROL + EXPRESSION + WSCONTROL + "}}"

ASSIGNMENT: VARPART + "=" + EXPRESSION
MULTIASSIGNMENT: ASSIGNMENT + ["," + ASSIGNMENT]*

ACTION:
    IF: "if" + EXPRESSION
    ELIF: "elif" + EXPRESSION
    ELSE: "else"
    ENDIF: "endif"
    FOR: "for" + VARPART + ["," + VARPART]? + "in" + EXPRESSION
    ENDFOR: "endfor"
    SWITCH: "switch" + EXPRESSION
    LT: "lt" + EXPRESSION
    LE: "le" + EXPRESSION
    GT: "gt" + EXPRESSION
    GE: "ge" + EXPRESSION
    NE: "ne" + EXPRESSION
    EQ: "eq" + EXPRESSION
    BT: "bt" + EXPRESSION + "," + EXPRESSION
    ENDSWITCH: "endswitch"
    SET: "set" + MULTIASSIGNMENT
    GLOBAL: "global" + MULTIASSIGNMENT
    TEMPLATE: "template" + MULTIASSIGNMENT
    SCOPE: "scope"
    ENDSCOPE: "endscope"
    INCLUDE: "include" + EXPRESSION + ["return" + VARPART]? + ["with" + MULTIASSIGNMENT]?
    RETURN: "return" + MULTIASSIGNMENT
    SECTION: "section" + EXPRESSION
    SECTION: "endsection"
    USE: "use" + EXPRESSION
    DEF: "def" +  STRING
    ENDDEF: "enddef"
    CALL: "call" + STRING
    VAR: "var" + VARPART
    ENDVAR: "endvar"
    ERROR: "error" + EXPRESSION
    IMPORT: "import" + MULTIASSIGNMENT
    AUTOSTRIP: "autostrip" | "autotrim" | "no_autostrip" |
        "push_autostrip" + ("on" | "off" | "trim") |
        "pop_autostrip"

MULTIEXPRESSION: EXPRESSION + ["," + EXPRESSION]*
EXPRESSION:
    STRING
    INTEGER
    FLOAT
    LIST
    VAR
    VARINDEX
    FUNC

LIST: "[" + MULTIEXPRESSION? + "]"
VAR: VARPART + ["." + VARPART]*
VARINDEX: VAR + "[" + MULTIEXPRESSION + "]"
VARPART: regex [A-Za-z_][A-Za-z0-9_]*
FUNC: VAR + "(" + MULTIEXPRESSION? + ")"

ACTIONSEGMENT:
    IFSEGMENT
    FORSEGMENT
    SWITCHSEGMENT
    ACTIONBLOCK(ACTION:SET)
    ACTIONBLOCK(ACTION:GLOBAL)
    ACTIONBLOCK(ACTION:TEMPLATE)
    SCOPESEGMENT
    ACTIONBLOCK(ACTION:INCLUDE)
    SECTIONSEGMENT
    ACTIONBLOCK(ACTION:USE)
    DEFSEGMENT
    ACTIONBLOCK(ACTION:CALL)
    VARSEGMENT
    ACTIONBLOCK(ACTION:ERROR)
    ACTIONBLOCK(ACTION:IMPORT)
    ACTIONBLOCK(ACTION:AUTOSTRIP)

IFSEGMENT:
    ACTIONBLOCK(ACTION:IF) +
    BLOCK* +
    [
        ACTIONBLOCK(ACTION:ELIF) +
        BLOCK*
    ]* +
    [
        ACTIONBLOCK(ACTION:ELSE) +
        BLOCK*
    ]? +
    ACTIONBLOCK(ACTION:ENDIF)

FORSEGMENT:
    ACTIONBLOCK(ACTION:FOR) +
    BLOCK* +
    [
        ACTIONBLOCK(ACTION:ELSE) +
        BLOCK*
    ]? +
    ACTIONBLOCK(ACTION:ENDFOR)

SWITCHSEGMENT:
    ACTIONBLOCK(ACTION:SWITCH) +
    BLOCK* +
    [
        (ACTIONBLOCK(ACTION:LT) | ACTIONBLOCK(ACTION:LE) |
         ACTIONBLOCK(ACTION:GT) | ACTIONBLOCK(ACTION:GE) |
         ACTIONBLOCK(ACTION:NE) | ACTIONBLOCK(ACTION:EQ) |
         ACTIONBLOCK(ACTION:BT)) +
        BLOCK*
    ]* +
    ACTIONBLOCK(ACTION:ENDSWITCH]

SCOPESEGMENT:
    ACTIONBLOCK(ACTION:SCOPE) +
    BLOCK* +
    ACTIONBLOCK(ACTION:ENDSCOPE)

SECTIONSEGMENT:
    ACTIONBLOCK(ACTION:SECTION) +
    BLOCK* +
    ACTIONBLOCK(ACTION:ENDSECTION)

DEFSEGMENT:
    ACTIONBLOCK(ACTION:DEF) +
    BLOCK* +
    ACTIONBLOCK(ACTION:ENDDEF)

VARSEGMENT:
    ACTIONBLOCK(ACTION:VAR) +
    BLOCK* +
    ACTIONBLOCK(ACTION:ENDVAR)


Whitespace Control
==================

{% autostrip %} will turn on auto-stripping for any text blocks following.
{% autotrim %} will turn on auto-trimming for any text blocks following.
{% no_autostrip %} will turn off auto-strip or auto-trim.

In autostrip mode, whitespace at the start and end of each text block is
removed.  In autotrim mode, the block is split into lines, blank lines are
removed, and leading whitespace from each line is removed.

A block can also have whitespace control characters to control how to treat
the ending of the previous text block and the start of the next next block:

    {{<endflag> ... <startflag>}}
    {%<endflag> ... <startflag>%}
    {#<endflag> ... <startflag>#}

endflag can be blank or one of "-", "<", "!", "^", or "+"
startflag can be "-" or "+"

"-" is used to remove all whitespace at the end of the previous block (endflag)
or the start of the next block (startflag), up to and including the newline.
This has no effect if autostrip or autotrim is enabled.

"<", "!", "^" is used to remove all white space at end of the previous block
up to but not including a newline.  This has no effect if autostrip or autotrim
is enabled.

"+" is used to insert a new line at the end of the previous block (endflag) or
at the start of the next block (startflag).  This will have an effect even if
autostrip ro autotrim is enabled.


Functions Libraries
===================

Function libraries can be imported into the current scope or global scope.

    {% import lib="name" %}
    {% gimport lib="name" %}

Currently provided libraries are:

    mrbavii_lib_template.stdlib

Library Functions
=================

import "mrbavii_lib_template.stdlib"
------------------------------------

path - Return the stdlib.path library
string - Return the stdlib.string library
html - Return the stdlib.html library

str(value) - Return the string form of a value
int(value) - Return the interger form of a value
float(value) - Return the float form of a value

count(value) - Return how the lenght of a value
add(value1, value2) - Add two values: value1 + value2
sub(value2, value2) - Subtract two values: value1 - value2
mul(value1, value2) - Multiply two values: value1 * value2
div(value1, value2) - Divide two values: value1 / value2
mod(value1, value2) - Determine a remainder: value1 % value2

iseven(value) - Return true if a value is even
isodd(value) - Return true if a value is odd
eq(value1, value2) - Return true if two values are equal
ne(value1, value2) - Return true if two values are not equal)
lt(value1, value2) - Returns true if value1 is less than value2
gt(value1, value2) - Returns true if value1 is greater than value2
le(value1, value2) - Returns true if value1 is less than or equal to value2
ge(value1, value2) - Returns true if value1 is greater than or equal to value2

seq(start, stop, step=1) - Return a sequence from start to but not including end.

library "stdlib.path"
---------------------

sep - The path separator
join(*parts) - Return the path parts joined together
split(path) - Return a list of [head, tail] with the part of a path split
              from the head.
splitext(path) - Returns a list of [path, ext] where ext will contain at most
               one "."
dirname(path) - Return the directory part of the path
basename(path) - Return the filename part of the path
relpath(target, fromdir) - Return the relative path to the target starting
                         in the fromdir

library "stdlib.string"
-----------------------
concat(*parts) - Return the concatenation of all parts
split(sep, value) - Return a list of the string split by a separator
join(self, sep, values) - Return the list of values joined by the separator
strip(value, what=None) - Return the strip with the start and ending stripped.
                          If what is not specified whitespace is stripped.
lstrip(value, what=None) - Return a string with the start of the string stripped.
rstrip(value, what=None) - Return a string wtih the end of the string stripped.
substr(self, value, start, end=None) - Return a substring of the string.
find(value, what, pos=None) - Find a substring starting at pos, -1 if not found.
rfind(value, what, pos=None) - Find a sbustring start at pos from the right,
                              -1 if not found.

library "stdlib.list"
---------------------
append(l, x) - Append x to l
extend(l, l2) - Extend l by l2
insert(l, i, x) - Insert x at position i in l
remove(l, x) - Remove the first item x from the list.  Error if it does not exist
pop(l, i=-1) - Pop and return an item from the list
reverse(l) - Reverse the list
count(l, x) - Count the number of items in a list
contains(l, x) - Return if list l contains x
splice(l, start, end) - Return a section of list from start to but not icluding end

library "stdlib.html"
---------------------
esc(value, quote=False) - Return a value quoted for HTML.  If quote is true,
                          it will be escaped will be escaped in such a way
                          that it can be used in quoted attributes.

